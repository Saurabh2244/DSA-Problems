// Brute Force==> Apply Linear Search

class Solution{
    public:
    int search(int A[], int l, int h, int key){
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        
        //complete the function here
        
        for(int i=0;i<h+1;i++){
            if(A[i]==key){
                return i;
            }
        }
        
        return -1;
    }
};

======================================================================================================

// Optimal Approach==> Apply Binary Search
                       First find Pivot then check where our key is lie forward pivot or backward pivot and
                       then apply Binary Search in that specific region

class Solution{
    public:
    
    //function for find Pivot
    int findPivot(int A[],int l,int h){
        int start=l;
        int end=h;
        int mid=start+(end-start)/2;
        
        while(start<end){
            if(A[0]<=A[mid]){
                start=mid+1;
            }
            
            else{
                end=mid;
            }
            
            mid=start+(end-start)/2;
        }
        
        return start;
    }
    
    //Binary search function
    int binarySearch(int A[],int s,int e,int key){
        int start=s;
        int end=e;
        int mid=start+(end-start)/2;
        
        while(start<=end){
            if(A[mid]==key){
                return mid;
            }
            
            else if(A[mid]<key){
                start=mid+1;
            }
            
            else{
                end=mid-1;
            }
            
            mid=start+(end-start)/2;
        }
        
        return -1;
    }
    
    int search(int A[], int l, int h, int key){
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        
        //complete the function here
        
        int pivot=findPivot(A,l,h);
        
        if(A[pivot]<=key && key<=A[h]){
            return binarySearch(A,pivot,h,key);
        }
        
        else{
            return binarySearch(A,l,pivot-1,key);
        }
        
        return -1;
        
    }
};
