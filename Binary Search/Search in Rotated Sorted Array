// Brute Force==> Apply Linear Search

class Solution{
    public:
    int search(int A[], int l, int h, int key){
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        
        //complete the function here
        
        for(int i=0;i<h+1;i++){
            if(A[i]==key){
                return i;
            }
        }
        
        return -1;
    }
};

======================================================================================================

// Optimal Approach==> Apply Binary Search
                       First find Pivot then check where our key is lie forward pivot or backward pivot and
                       then apply Binary Search in that specific region

class Solution {
public:
    
    int findPivot(vector<int>&nums,int n){
        int start=0;
        int end=n-1;
        int mid=start+(end-start)/2;

        while(start<end){
            if(nums[0]<=nums[mid]){
                start=mid+1;
            }

            else{
                end=mid;
            }

            mid=start+(end-start)/2;
        }
        return start;
    }

    int binarySearch(vector<int>&nums,int n,int s,int e,int key){
        int start=s;
        int end=e;
        int mid=start+(end-start)/2;

        while(start<=end){
            if(nums[mid]==key){
                return mid;
            }

            else if(nums[mid]<key){
                start=mid+1;
            }

            else{
                end=mid-1;
            }

            mid=start+(end-start)/2;
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int n=nums.size();

        int pivot=findPivot(nums,n);

        if(nums[pivot]<=target && target<=nums[n-1]){
            return binarySearch(nums,n,pivot,n-1,target);
        }

        else{
            return binarySearch(nums,n,0,pivot-1,target);
        }
    }
};
