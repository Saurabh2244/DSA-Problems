#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node *next;
        Node *prev;
        
    Node(int data){
        this->data=data;
        this->next=NULL;
        this->prev=NULL;
    }
};

void insertAtHead(Node *&head, Node *&tail, int data,int &length){
    //empty list
    if(head==NULL){
        Node* Temp=new Node(data);
        head=Temp;
        tail=Temp;
                
        length++;

        return;
    }
    
    Node*temp=new Node(data);
    temp->next=head;
    head->prev=temp;
    head=temp;
    
    length++;
    
    return;
    
}

void insertAtTail(Node *&head,Node*&tail,int data, int &length){
    //empty list
    if(head==NULL){
        Node* Temp=new Node(data);
        head=Temp;
        tail=Temp;
        
        length++;
        
        return;
    }
    
    Node*temp=new Node(data);
    tail->next=temp;
    temp->prev=tail;
    
    tail=temp;
    
    length++;
    return;

}

void insertAtPosition(Node*&head,Node*&tail,int position,int &length,int data){
    if(position<0 || position>length){
        cout<<"Position is invalid"<<endl;
        return;
    }
    
    if(position==1){
        insertAtHead(head,tail,data,length);
        return;
    }
    
    if(position==length){
        insertAtTail(head,tail,data,length);
        return;
    }
    
    int cnt=1;
    Node*temp=head;
    
    while(cnt<position-1){
        temp=temp->next;
        cnt++;
    }
    
    Node* node_to_add=new Node(data);

    node_to_add->next=temp->next;
    temp->next->prev=node_to_add;
    temp->next=node_to_add;

    length++;
    
    return;
}

void deleteAtPosition(Node *&head,Node*&tail,int position,int &length){
    
    if(position<0 || position>length){
        cout<<"Position is invalid"<<endl;
        return;
    }
    
    if(position==1){
        Node*temp=head;
        head=temp->next;
        temp->next->prev=NULL;
        temp->next=NULL;
        
        delete temp;
        length--;
        
        return;
    }
    
    int cnt=1;
    Node*temp=head;
    
    while(cnt<position-1){
        temp=temp->next;
        cnt++;
    }
    
    if(temp->next->next==NULL){
        tail=temp;
        
        temp->next->prev=NULL;
        temp->next=NULL;
        
        length--;
        
        return;
    }
    Node *node_to_be_delete=temp->next;
    temp->next=node_to_be_delete->next;
    node_to_be_delete->next->prev=temp;
    
    node_to_be_delete->next=NULL;
    node_to_be_delete->prev=NULL;
    
    length--;
    
    delete node_to_be_delete;
}

int getLength(Node *&head,Node *&tail){
    int cnt=0;
    
    Node*temp=head;
    while(temp!=NULL){
        cnt++;
        temp=temp->next;
    }
    
    return cnt;
}

void print_List(Node*&head,Node*&tail){
    if(head==NULL){
        cout<<"Linked list is empty"<<endl;
        return;
    }
    
    Node *temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    
    return;
}


int main()
{
    Node *head=NULL;
    Node *tail=NULL;
    
    int length=getLength(head,tail);
    cout<<"Insert At Head: ";
    insertAtHead(head,tail,1,length);
    insertAtHead(head,tail,2,length);
    insertAtHead(head,tail,3,length);
    insertAtHead(head,tail,4,length);
    insertAtHead(head,tail,5,length);

    print_List(head,tail);
    
    cout<<endl;
    cout<<"Head Data: "<<head->data<<endl;
    cout<<"Tail Data: "<<tail->data<<endl;
    
    cout<<endl<<endl;
    
    cout<<"Length is "<<length<<endl;

    cout<<"Insert At Tail: ";
    insertAtTail(head,tail,1,length);
    insertAtTail(head,tail,2,length);
    insertAtTail(head,tail,3,length);
    insertAtTail(head,tail,4,length);
    insertAtTail(head,tail,9,length);

    print_List(head,tail);
    
    cout<<endl;
    cout<<"Head Data: "<<head->data<<endl;
    cout<<"Tail Data: "<<tail->data<<endl;
    
    cout<<"Length is "<<length<<endl;
    
    cout<<endl<<endl;
    
    cout<<"Insert At position 3: ";
    insertAtPosition(head,tail,3,length,900);
    print_List(head,tail);
    
    cout<<endl;
    cout<<"Head Data: "<<head->data<<endl;
    cout<<"Tail Data: "<<tail->data<<endl;
    
    cout<<"Length is "<<length<<endl;
    
    cout<<endl<<endl;
    
    cout<<"Delete at position 1: ";
    deleteAtPosition(head,tail,length,length);
    
    print_List(head,tail);
    
    cout<<endl;
    cout<<"Head Data: "<<head->data<<endl;
    cout<<"Tail Data: "<<tail->data<<endl;
    
    cout<<"Length is "<<length<<endl;


    
    return 0;
}
